<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:securty="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://code.alibabatech.com/schema/dubbo
                            http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/security
                            http://www.springframework.org/schema/security/spring-security.xsd">
    <!--匿名访问 匿名过滤器 将静态一些资源进行放行-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>

    <!--权限拦截规则配置
     auto-config自动配置默认生成登录页面
     use-expressions:是否使用表达式 false:不使用表达式  true:使用表达式

     security:intercept-url:一般配置公共页面权限控制
     @PreAuthorize:粒度比较细的时候，通过注解方式
    -->
    <security:http auto-config="true" use-expressions="true">

        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ADMIN')" />

        <security:intercept-url pattern="/e.html"  access="hasRole('update')" />

        <!--<security:intercept-url pattern="/hello/add.do"  access="hasAuthority('add')" />-->

        <!--配置认证规则
        pattern=/** 所有的页面和请求都会被拦截
        access:指定具体的权限 ROLE_USER
        -->
       <!-- <security:intercept-url pattern="/**" access="ROLE_ADMIN"/>-->
        <!--配置登录
        login-processing-url：登录请求地址配置
        default-target-url取代 authentication-success-forward-url：认证成功后跳转的页面
        authentication-failure-forward-url:认证失败跳转的页面
        -->
        <security:form-login login-processing-url="/login.do" authentication-failure-forward-url="/login.html"
                             login-page="/login.html"
                             default-target-url="/index.html"/>
        <!--禁用csrf跨站请求伪造-->
        <security:csrf disabled="true"/>

        <!--登出配置-->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>

    <!--认证管理器  默认的配置方式认证 写死的账号密码-->
    <!--<security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                &lt;!&ndash;官方提供使用权限框架 配置 {noop}:不使用任何方式加密&ndash;&gt;
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}123456"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->

    <!--认证管理器 自定义的认证和授权类-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--配置指定加密算法-->
            <security:password-encoder ref="bCryptPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--bean方式注册SpringSecurityUserService-->
    <bean id="springSecurityUserService" class="com.itheima.securtiy.SpringSecurityUserService"/>

    <!--注册密码加密对象-->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--加入扫描-->
    <context:component-scan base-package="com"/>

    <!--启动权限注解-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>